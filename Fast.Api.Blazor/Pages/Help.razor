@page "/"
@inject NavigationManager url
@inject IJSRuntime js
@{
    var IFast = ServiceContext.Engine.Resolve<IFastRepository>();
}
<h3 style="color:red;text-align:center;">动态生成接口文档(FastApi)</h3>
<div style="width:85%;margin:0 auto;margin-top:-10px;">
    @{
        foreach (var map in IFast.Api())
        {
            var id = string.Format("map_{0}", map.Key);
            var apiList = (map.Value as List<string>) ?? new List<string>();
            if (apiList.Count == 0)
            { continue; }

            <label onclick="@(async()=>await TitleClick(id))" class="title" style="width:100%;cursor:pointer;padding-left:10px;color:green;" data-id="@id">@map.Key</label>
            <label id="@id" style="display:none;width:100%;">
                @foreach (var item in apiList)
                {
                    var itemId = string.Format("{0}{1}", map.Key, item.Replace("/","."));
                    var result = string.Format("textarea{0}", item);
                    var address = string.Format("http://{0}{1}", url.BaseUri, item);
                    if (GetType(item,IFast) == "hide")
                    { continue; }
                    var name = IFast.MapParam(item);
                    <label class="left"><font color="blue">@GetName(item,IFast)</font><font color="#e91e63" style="margin-left:20px;">类型：@GetType(item,IFast)</font></label>
                    <label class="right"><font color="green" onclick="@(async()=>await ParamterClick(itemId))">显示参数</font></label>
                    <table id="@itemId" style="background-color:#efefef;margin-bottom:10px;width:99.5%;">
                        @if (name.Count == 1)
                        {
                            <tr>
                                <td width="45%" align="left">
                                    @if (IsPage(item,IFast))
                                    {
                                        <div><span>PageId：</span><input type="text" name="PageId" id="PageId" /></div>
                                        <div><span>PageSize：</span><input type="text" name="PageSize" id="PageSize" /></div>
                                    }
                                    <div><span>@name[0]：</span><input type="text" name="@name[0]" id="@name[0]" placeholder="@IFast.MapParamRemark(item, name[0])" /></div>
                                </td>
                                <td width="10%" align="center"><button @onclick="@(async()=>await SubmitClick(itemId,result,address))">测试</button></td>
                                <td width="45%" align="left" valign="bottom"><textarea cols="50" id="textarea@(item)" rows="5"></textarea></td>
                            </tr>
                        }
                        else if (name.Count > 1)
                        {
                            var i = 0;
                            foreach (var temp in name)
                            {
                                if (i == 0)
                                {
                                    <tr>
                                        <td width="45%" align="left">
                                            @if (IsPage(item,IFast))
                                            {
                                                <span>PageId：</span><input type="text" name="PageId" id="PageId" />
                                                <span>PageSize：</span><input type="text" name="PageSize" id="PageSize" />
                                            }
                                            <span>@temp：</span><input type="text" name="@temp" id="@temp" placeholder="@IFast.MapParamRemark(item, temp)" />
                                        </td>
                                        <td width="10%" align="center" rowspan="@name.Count">
                                            <button @onclick="@(async()=>await SubmitClick(itemId,result,address))">测试</button>
                                         </td>
                                        <td width="45%" align="left" rowspan="@name.Count"><textarea cols="50" id="textarea@(item)" rows="5"></textarea></td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td width="45%" align="left"><span>@temp：</span><input type="text" name="@temp" id="@temp" placeholder="@IFast.MapParamRemark(item, temp)" /></td>
                                    </tr>
                                }
                                i++;
                            }
                        }
                    </table>
                }
            </label>
        }
    }
</div>

@code{
    public async Task TitleClick(string id) => await js.InvokeVoidAsync("methods.Help_TitleClick", new object[] { id }).AsTask();
    public async Task ParamterClick(string id) => await js.InvokeVoidAsync("methods.Help_ParamterClick", new object[] { id }).AsTask();
    public async Task SubmitClick(string id, string result, string url) => await js.InvokeVoidAsync("methods.Help_SubmitClick", new object[] { id, result, url }).AsTask();

    public static string GetType(string name, IFastRepository IFast)
    {
        if (IFast.MapType(name).ToLower() == Fast.Api.AppConfig.Page)
            return "选取-分页参数";
        else if (IFast.MapType(name).ToLower() == Fast.Api.AppConfig.PageAll)
            return "读取-分页所有";
        else if (IFast.MapType(name).ToLower() == Fast.Api.AppConfig.All)
            return "读取-所有";
        else if (IFast.MapType(name).ToLower() == Fast.Api.AppConfig.Hide)
            return "hide";
        else if (IFast.MapType(name).ToLower() == Fast.Api.AppConfig.Write)
            return "写";
        else
            return "参数";
    }

    public static bool IsPage(string name, IFastRepository IFast)
    {
        if (IFast.MapType(name).ToLower() == "page")
            return true;
        else
            return false;
    }

    public static string GetName(string name, IFastRepository IFast)
    {
        if (string.IsNullOrEmpty(IFast.MapRemark(name)))
            return name;
        else
            return string.Format("{0}({1})", name, IFast.MapRemark(name));
    }
}